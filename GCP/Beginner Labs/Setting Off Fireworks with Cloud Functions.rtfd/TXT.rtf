{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red199\green199\blue224;}
{\*\expandedcolortbl;;\csgray\c100000;\cssrgb\c81961\c82353\c90196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17120\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf0 \cb2 \expnd0\expndtw0\kerning0
Google Cloud Functions are amazingly versatile. Not only can they act as the glue between other cloud services \'97both on and off Google Cloud Platform\'97 but their HTTP trigger capability makes them ideal for launching a single web page. In this hands-on lab, you'll see how to move Python code into a newly created Cloud Source Repository and then pull that code into a Cloud Function. Trigger the function with the click of a link, and you'll get the fireworks you've always wanted \'97 complete with sound explosion.\
\
{{\NeXTGraphic Pasted Graphic.png \width31580 \height12800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\
1. Enable APIs\
\
gcloud services enable cloudfunctions.googleapis.com\
\pard\pardeftab720\partightenfactor0
\cf0 gcloud services enable cloudbuild.googleapis.com\
\pard\pardeftab720\partightenfactor0
\cf0 \
2. Clone the repository\
\
git clone https://github.com/linuxacademy/content-gc-serverless.git\
\
3. Change directory\
\
cd content-gc-serverless/cloud-functions-lab\
\
4. Copy the contents of the main.py file\
\
5. Navigate to cloud functions on the console and deploy the a second generation cloud function. Change the number of maximum instances in autoscaling to 1.  \
\
}