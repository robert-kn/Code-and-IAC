{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red199\green199\blue224;\red120\green123\blue180;
}
{\*\expandedcolortbl;;\csgray\c100000;\cssrgb\c81961\c82353\c90196;\cssrgb\c54510\c56471\c75686;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh17120\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The strength and flexibility of Kubernetes is built around the concept of containerized applications, which are deployed differently from non-containerized apps. In this hands-on lab, you\'92ll complete all the steps from creating a Kubernetes cluster to confirming the deployed application, including creating the Docker image of your application, pushing that image to Container Registry, deploying the workload, and then configuring a load balancer to expose it.\
\
1. Create the Kubernetes engine cluster\
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \outl0\strokewidth0 gcloud services enable container.googleapis.com\
\
gcloud container clusters create test-cluster --zone us-central1-c --enable-autoscaling  --num-nodes 4 --node-locations us-central1-b,us-central1-c --machine-type n1-standard-1\
\
2. Clone the repository\
\
git clone https://github.com/linuxacademy/content-gcpro-developer.git\
\
cd \cb2 \outl0\strokewidth0 \strokec4 content-gcpro-developer/kubernetes-engine-lab\cb2 \outl0\strokewidth0  \
\
3. Configure the config.yaml file by replacing the project id on line 32 with your project id\
\
4. Build the containerised docker image\
\
docker build -t la-container-image .\
\
5. Push the containerised app into the container registry\
\
gcloud auth configure-docker\
\
docker tag la-container-image gcr.io/$DEVSHELL_PROJECT_ID/la-container-image:v1\
\
docker push gcr.io/$DEVSHELL_PROJECT_ID/la-container-image:v1\
\
6. Confirm that the image has been successfully pushed\
\
gcloud container images list --repository gcr.io/$DEVSHELL_PROJECT_ID\
\
7. Deploy the workload\
\
kubectl create deployment la-deployment --image=gcr.io/$DEVSHELL_PROJECT_ID/la-container-image:v1\
\
8. Increase the number of replicas\
\
kubectl edit deployment la-deployment\
\
Then increase the number of replicas to whatever you like\
\
Save and exit the file\
\
Running kubectl get deploy should should that the number of pods has increased to the number of replicas that was input\
\
9. Expose the deployment\
\
kubectl expose deployment la-deployment --name la-service --type LoadBalancer --port 80 --target-port 80}