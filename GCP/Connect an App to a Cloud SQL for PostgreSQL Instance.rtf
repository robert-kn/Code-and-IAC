{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red24\green25\blue27;\red255\green255\blue255;\red24\green24\blue24;
\red22\green79\blue199;\red0\green0\blue0;\red157\green225\blue43;\red32\green32\blue32;\red246\green246\blue239;
\red241\green155\blue41;}
{\*\expandedcolortbl;;\cssrgb\c12549\c12941\c14118;\cssrgb\c100000\c100000\c100000;\cssrgb\c12157\c12157\c12157;
\cssrgb\c9804\c40392\c82353;\cssrgb\c0\c0\c0\c5098;\cssrgb\c67059\c89020\c21961;\cssrgb\c16863\c16863\c16863;\cssrgb\c97255\c97255\c94902;
\cssrgb\c96078\c67059\c20784;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid701\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat3\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid801\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat5\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat6\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat5\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat8\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1701\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1801\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1901\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat4\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2002\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat6\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat6\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid24}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}}
\paperw11900\paperh16840\margl1440\margr1440\vieww33100\viewh16680\viewkind0
\deftab720
\pard\pardeftab720\sa640\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Overview\
\pard\pardeftab720\sa480\partightenfactor0

\f1\b0\fs32 \cf2 Cloud SQL is a fully managed relational database service for MySQL, PostgreSQL, and Microsoft SQL Server that offers many services for common adminstrative tasks such as backups, replication, and logging. You can easily connect your applications to a Cloud SQL instance to leverage these useful services.\
In this lab, you first create a Kubernetes cluster and deploy a simple application to that cluster. You then connect the application to a supplied Cloud SQL for PostgreSQL instance and confirm that it is able to write to and read from it.\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 What you'll do\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\fs32 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create a Kubernetes cluster and deploy a simple application to that cluster.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Connect the application to the supplied Cloud SQL for PostgreSQL database instance.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Confirm that the application is able to write to and read from the database.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 \cb3 Set your region and zone\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 Certain Compute Engine resources live in regions and zones. A region is a specific geographical location where you can run your resources. Each region has one or more zones.\
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \strokec4 Learn more about regions and zones and see a complete list in\'a0{\field{\*\fldinst{HYPERLINK "https://cloud.google.com/compute/docs/regions-zones/"}}{\fldrslt \cf5 \strokec5 Regions & Zones documentation}}.\
\pard\pardeftab720\sa480\partightenfactor0
\cf2 \cb3 \strokec2 Run the following gcloud commands in Cloud Console to set the default region and zone for your lab:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf2 gcloud config set compute/zone "ZONE"\
export ZONE=$(gcloud config get compute/zone)\
\
gcloud config set compute/region "REGION"\
export REGION=$(gcloud config get compute/region)\cb1 \
\
\
\
\pard\pardeftab720\sa640\partightenfactor0

\f0\b\fs60 \cf2 \cb3 Task 1. Initialize APIs and create a Cloud IAM service account\
\pard\pardeftab720\sa480\partightenfactor0

\f1\b0\fs32 \cf2 To complete this task you must initialize the APIs and create an IAM service account that will be used to allow your application to connect to the Cloud SQL database.\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 Enable the APIs\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 You must enable the required APIs for this lab. You will build and push a container to the Artifact Registry in a later task, so you must enable the Artifact Registry API first.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, run the following command to enable the Artifact Registry API:\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb1 \
gcloud services enable artifactregistry.googleapis.com\
\
\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 \cb3 \strokec2 Create a Service Account for Cloud SQL\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 You need to configure IAM service account credentials for the application that you will deploy later. The service account must be bound to a role that allows it to create and access Cloud SQL databases.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, create a Service Account and bind it to the Cloud SQL admin role in the lab project:\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \strokec2 \
export PROJECT_ID=$(gcloud config list --format 'value(core.project)')\
export CLOUDSQL_SERVICE_ACCOUNT=cloudsql-service-account\
\
gcloud iam service-accounts create $CLOUDSQL_SERVICE_ACCOUNT --project=$PROJECT_ID\
\
gcloud projects add-iam-policy-binding $PROJECT_ID \\\
--member="serviceAccount:$CLOUDSQL_SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com" \\\
--role="roles/cloudsql.admin" \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, create and export keys to a local file:\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \strokec2 \
gcloud iam service-accounts keys create $CLOUDSQL_SERVICE_ACCOUNT.json \\\
    --iam-account=$CLOUDSQL_SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com \\\
    --project=$PROJECT_ID\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 The file will be saved to your home folder in Cloud Shell.\
\
\
\
\pard\pardeftab720\sa640\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Task 2. Deploy a lightweight GKE application\
\pard\pardeftab720\sa480\partightenfactor0

\f1\b0\fs32 \cf2 In this task you will create a Kubernetes cluster and deploy a lightweight Google Kubernetes Engine (GKE) application on that cluster. You will configure the application to have access to the supplied Cloud SQL instance.\
The application provided is a simple Flask-SQLAlchemy web application called gMemegen. It creates memes by supplying a set of photographs and capturing header and footer text, storing them in the database and rendering the meme to a local folder. It runs on a single pod with two containers; one for the application and one for the Cloud SQL Auth Proxy deployed in the side-car pattern.\
A load balancer will marshal requests between the app and the database through the side-car. This load balancer will expose an external Ingress IP address through which you will access the app in your browser.\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 Create a Kubernetes cluster\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 In this step, you will create a minimal Kubernetes cluster. The cluster will take a couple of minutes to be deployed.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, create a minimal Kubernetes cluster as follows:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
ZONE=ZONE\
gcloud container clusters create postgres-cluster \\\
--zone=$ZONE --num-nodes=2\
\
\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 \cb3 \strokec2 Create Kubernetes secrets for database access\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 In this step you will create a pair of Kubernetes secrets containing the credentials that are needed to connect to the Cloud SQL instance and database.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, run the following commands to create the secrets:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
kubectl create secret generic cloudsql-instance-credentials \\\
--from-file=credentials.json=$CLOUDSQL_SERVICE_ACCOUNT.json\
    \
kubectl create secret generic cloudsql-db-credentials \\\
--from-literal=username=postgres \\\
--from-literal=password=supersecret! \\\
--from-literal=dbname=gmemegen_db\
\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 \cb3 \strokec2 Download and build the GKE application container\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 Before you can deploy the gMemegen application to your GKE cluster you need to build the container and push it to a repository.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, download the provided application code and change to the application directory:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
gsutil -m cp -r gs://spls/gsp919/gmemegen .\
cd gmemegen\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create environment variables for the region, Project ID and Artifact Registry repository:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
export REGION="REGION"\
export PROJECT_ID=$(gcloud config list --format 'value(core.project)')\
export REPO=gmemegen\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Configure Docker authentication for the Artifact Registry:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
gcloud auth configure-docker $\{REGION\}-docker.pkg.dev\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Enter\'a0
\f3\fs30 \cb6 Y
\f1\fs32 \cb3 \'a0if you are asked for confirmation.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create the Artifact Registry repository:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
gcloud artifacts repositories create $REPO \\\
    --repository-format=docker --location=$REGION\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Build a local Docker image:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
docker build -t $\{REGION\}-docker.pkg.dev/$\{PROJECT_ID\}/gmemegen/gmemegen-app:v1 .\
\
\pard\pardeftab720\sa480\partightenfactor0
\cf2 \cb3 \strokec2 For the purposes of this lab, you may ignore the warning about running 'pip' as the 'root' user, although you should note that, in general, especially when working on your local machine, it is best practice to use a virtual environment.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Push the image to the Artifact Registry:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
docker push $\{REGION\}-docker.pkg.dev/$\{PROJECT_ID\}/gmemegen/gmemegen-app:v1\
\
\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 \cb3 \strokec2 Configure and deploy the GKE application\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 You must modify the Kubernetes deployment manifest for the gMemegen application to point at the correct container and configure the Cloud SQL Auth Proxy side-car with the connection string for the Cloud SQL PostgreSQL instance.\
The instructions explain how to edit the file using the Cloud Shell Editor, but if you prefer you can use another editor, such as\'a0
\f3\fs30 \cf2 \cb6 \strokec2 vi
\f1\fs32 \cf2 \cb3 \strokec2 \'a0or\'a0
\f3\fs30 \cf2 \cb6 \strokec2 nano
\f1\fs32 \cf2 \cb3 \strokec2 , from Cloud Shell for these steps.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa480\partightenfactor0
\ls14\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On the Cloud Shell menu bar, click\'a0
\f0\b Open Editor
\f1\b0 \'a0to open the Cloud Shell Editor.\cb1 \
\ls14\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Navigate the\'a0
\f0\b Explorer
\f1\b0 \'a0panel on the left hand side, expanding the\'a0
\f3\fs30 \cb6 gmemegen
\f1\fs32 \cb3 \'a0folder and then selecting\'a0
\f3\fs30 \cb6 gmemegen_deployment.yaml
\f1\fs32 \cb3 \'a0to edit the file.\cb1 \
\ls14\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On\'a0
\f0\b line 33
\f1\b0 , in the\'a0
\f3\fs30 \cb6 image
\f1\fs32 \cb3 \'a0attribute, replace\'a0
\f3\fs30 \cb6 $\{REGION\}
\f1\fs32 \cb3 \'a0with\'a0and\'a0
\f3\fs30 \cb6 $\{PROJECT_ID\}
\f1\fs32 \cb3 \'a0with\'a0. The line should now read:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf7 \cb8 \strokec7 image:\cf9 \strokec9  \cf7 \strokec7 "REGION"\cf9 \strokec9 -docker.pkg.dev/\cf7 \strokec7 "Project ID"\cf9 \strokec9 /gmemegen/gmemegen-app:v1\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb1 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On\'a0
\f0\b line 60
\f1\b0 , replace replace\'a0
\f3\fs30 \cb6 $\{REGION\}
\f1\fs32 \cb3 \'a0with\'a0and\'a0
\f3\fs30 \cb6 $\{PROJECT_ID\}
\f1\fs32 \cb3 \'a0with\'a0. The line should now read:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf9 \cb8 \strokec9 -instances=\cf7 \strokec7 "Project ID":"REGION":postgres-gmemegen=tcp:\cf10 \cb8 \strokec10 5432\cf9 \cb8 \strokec9 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sa480\partightenfactor0
\cf2 \cb3 \strokec2 To confirm that the connection name is correct, in the Cloud Console, navigate to\'a0
\f0\b \cf2 \cb3 \strokec2 Databases
\f1\b0 \cf2 \cb3 \strokec2 \'a0>\'a0
\f0\b \cf2 \cb3 \strokec2 SQL
\f1\b0 \cf2 \cb3 \strokec2 , select the\'a0
\f3\fs30 \cf2 \cb6 \strokec2 postgres-gmemegen
\f1\fs32 \cf2 \cb3 \strokec2 \'a0instance and compare with the\'a0
\f0\b \cf2 \cb3 \strokec2 Connection name
\f1\b0 \cf2 \cb3 \strokec2 \'a0in the\'a0
\f0\b \cf2 \cb3 \strokec2 Overview
\f1\b0 \cf2 \cb3 \strokec2 \'a0pane. A valid connection name is of the format\'a0
\f3\fs30 \cf2 \cb6 \strokec2 PROJECT_ID:REGION:CLOUD_SQL_INSTANCE_ID
\f1\fs32 \cf2 \cb3 \strokec2 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa480\partightenfactor0
\ls16\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Save your changes by selecting\'a0
\f0\b File
\f1\b0 \'a0>\'a0
\f0\b Save
\f1\b0 \'a0from the Cloud Shell Editor menu.\cb1 \
\ls16\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the Cloud console click the\'a0
\f0\b Open Terminal
\f1\b0 \'a0to re-open Cloud Shell. You may need to resize the Terminal window by dragging down the handle at the centre top of the menu bar, in order to see your Cloud Console window above.\cb1 \
\ls16\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, deploy the application by running the following command:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 kubectl create -f gmemegen_deployment.yaml\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, check that the deployment was successful by running the following command:\
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \cb1 \
kubectl get pods\
\
\pard\pardeftab720\sa480\partightenfactor0
\cf2 \cb3 \strokec2 It may take a minute or so for the pods to start up, because they need to pull the image from the repository. Repeat the above command until you see a pod, with 2 containers, with status\'a0
\f3\fs30 \cf2 \cb6 \strokec2 Running
\f1\fs32 \cf2 \cb3 \strokec2 .\
\pard\pardeftab720\sa640\partightenfactor0

\f0\b\fs60 \cf2 Task 3. Connect the GKE application to an external load balancer\
\pard\pardeftab720\sa480\partightenfactor0

\f1\b0\fs32 \cf2 In this task you will create a load balancer to marshal requests between the containers in your GKE pods and access the application using its external IP address from your browser.\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 Create a load balancer to make your GKE application accessible from the web\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 In this step you will create a Kubernetes load balancer service that will provide your application with a public IP address.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, run the following command to create a load balancer for the application:\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \strokec2 \
kubectl expose deployment gmemegen \\\
    --type "LoadBalancer" \\\
    --port 80 --target-port 8080\
\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 \cb3 \strokec2 Test the application to generate some data\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 In this step you will access the gMemegen application from your web browser.\
The application has a very simple interface. It launches to the application home page, which displays 6 candidate images for making memes. You can select an image by clicking on it.\
The\'a0
\f0\b \cf2 \cb3 \strokec2 Create Meme
\f1\b0 \cf2 \cb3 \strokec2 \'a0page is displayed, where you enter two items of text, to be displayed at the top and bottom of the image. Clicking\'a0
\f0\b \cf2 \cb3 \strokec2 Submit
\f1\b0 \cf2 \cb3 \strokec2 \'a0renders the meme and displays it. The interface provides no navigation from the completed meme page. You will have to use the browser's back button to return to the home page.\
There are two other pages,\'a0
\f0\b \cf2 \cb3 \strokec2 Recent
\f1\b0 \cf2 \cb3 \strokec2 \'a0and\'a0
\f0\b \cf2 \cb3 \strokec2 Random
\f1\b0 \cf2 \cb3 \strokec2 , which display a set of recently generated memes and a random meme, respectively. Generating memes and navigating the UI will generate database activity which you can view in the logs as described below.\
Wait for the load balancer to expose an external IP, which you can retrieve as follows:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, copy the external IP address attribute of the\'a0
\f3\fs30 \cb6 LoadBalancer Ingress
\f1\fs32 \cb3 \'a0from the output of:\cb1 \
\pard\tx720\pardeftab720\partightenfactor0
\cf2 \strokec2 \
kubectl describe service gmemegen\
\
\pard\pardeftab720\partightenfactor0

\f3\fs28 \cf9 \cb8 \strokec9 Name:                     \cf7 \strokec7 gmemegen\cf9 \strokec9 \
Namespace:                \cf7 \strokec7 default\cf9 \strokec9 \
Labels:                   \cf7 \strokec7 app=gmemegen\cf9 \strokec9 \
Annotations:              \
Selector:                 \cf7 \strokec7 app=gmemegen\cf9 \strokec9 \
Type:                     \cf7 \strokec7 LoadBalancer\cf9 \strokec9 \
IP Families:              \
IP:                       \cf10 \cb8 \strokec10 10.3.240.201\cf9 \cb8 \strokec9 \
IPs:                      \cf10 \cb8 \strokec10 10.3.240.201\cf9 \cb8 \strokec9 \
LoadBalancer Ingress:     \cf10 \cb8 \strokec10 34.67.122.203\cf9 \cb8 \strokec9 \
Port:                       \cf10 \cb8 \strokec10 80\cf7 \cb8 \strokec7 /TCP\cf9 \strokec9 \
TargetPort:               \cf10 \cb8 \strokec10 8080\cf7 \cb8 \strokec7 /TCP\cf9 \strokec9 \
NodePort:                   \cf10 \cb8 \strokec10 31837\cf7 \cb8 \strokec7 /TCP\cf9 \strokec9 \
Endpoints:                \cf10 \cb8 \strokec10 10.0.0.7\cf7 \cb8 \strokec7 :8080\cf9 \strokec9 \
Session Affinity:         \cf7 \strokec7 None\cf9 \strokec9 \
External Traffic Policy:  \cf7 \strokec7 Cluster\cf9 \strokec9 \
Events:\
  \cf7 \strokec7 Type\cf9 \strokec9     \cf7 \strokec7 Reason\cf9 \strokec9                 \cf7 \strokec7 Age\cf9 \strokec9    \cf7 \strokec7 From\cf9 \strokec9                 \cf7 \strokec7 Message\cf9 \strokec9 \
  \cf7 \strokec7 ----\cf9 \strokec9     \cf7 \strokec7 ------\cf9 \strokec9                 \cf7 \strokec7 ----\cf9 \strokec9   \cf7 \strokec7 ----\cf9 \strokec9                 \cf7 \strokec7 -------\cf9 \strokec9 \
  \cf7 \strokec7 Normal\cf9 \strokec9   \cf7 \strokec7 EnsuringLoadBalancer\cf9 \strokec9   \cf7 \strokec7 85s\cf9 \strokec9    \cf7 \strokec7 service-controller\cf9 \strokec9   \cf7 \strokec7 Ensuring\cf9 \strokec9  \cf7 \strokec7 load\cf9 \strokec9  \cf7 \strokec7 balancer\cf9 \strokec9 \
  \cf7 \strokec7 Normal\cf9 \strokec9   \cf7 \strokec7 EnsuredLoadBalancer\cf9 \strokec9    \cf7 \strokec7 36s\cf9 \strokec9    \cf7 \strokec7 service-controller\cf9 \strokec9   \cf7 \strokec7 Ensured\cf9 \strokec9  \cf7 \strokec7 load\cf9 \strokec9  \cf7 \strokec7 balancer\cf9 \strokec9 \
\pard\tx720\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\sa480\partightenfactor0
\cf2 \cb3 \strokec2 It will take a minute or so for the\'a0
\f3\fs30 \cf2 \cb6 \strokec2 LoadBalancer Ingress
\f1\fs32 \cf2 \cb3 \strokec2 \'a0attribute to be included in the output (see above), so repeat the command until it is there before performing the next step.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls20\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In a browser, navigate to the load balancer's Ingress IP address.\cb1 \
\pard\pardeftab720\sa480\partightenfactor0
\cf2 \cb3 \strokec2 You can create a clickable link to the external IP address of the load balancer in Cloud Shell using the following commands:\
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 \strokec4 \
export LOAD_BALANCER_IP=$(kubectl get svc gmemegen \\\
-o=jsonpath='\{.status.loadBalancer.ingress[0].ip\}' -n default)\
echo gMemegen Load Balancer Ingress IP: http://$LOAD_BALANCER_IP\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa480\partightenfactor0
\ls21\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Click the link in Cloud Shell and you will see the gMemegen application running in a new tab in your browser.\cb1 \
\ls21\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create a meme as follows:\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa360\partightenfactor0
\ls21\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 On the\'a0
\f0\b Home
\f1\b0 \'a0page, click on one of the presented images.\cb1 \
\ls21\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Enter text in the\'a0
\f0\b Top
\f1\b0 \'a0and\'a0
\f0\b Bottom
\f1\b0 \'a0text boxes.\cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Click the\'a0
\f0\b Submit
\f1\b0 \'a0button.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 Your new meme is displayed.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa480\partightenfactor0
\ls22\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To create more memes, use the browser's back buttton to navigate to the home page.\cb1 \
\ls22\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To view existing memes, click\'a0
\f0\b Recent
\f1\b0 \'a0or\'a0
\f0\b Random
\f1\b0 \'a0in the application menu. (Note that\'a0
\f0\b Random
\f1\b0 \'a0opens a new browser tab)\cb1 \
\ls22\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Cloud Shell, view the application\'92s activity by running the following:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 POD_NAME=$(kubectl get pods --output=json | jq -r ".items[0].metadata.name")\
kubectl logs $POD_NAME gmemegen | grep "INFO"\
\
\cf2 \cb3 \strokec2 This queries the logs from the\'a0
\f3\fs30 \cf2 \cb6 \strokec2 gmemegen
\f1\fs32 \cf2 \cb3 \strokec2 \'a0container and will display the activity of the application on the pod, including the SQL statements, which are logged to stderr as they are executed.\
\
\
\pard\pardeftab720\sa640\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Task 4. Verify full read/write capabilities of application to database\
\pard\pardeftab720\sa480\partightenfactor0

\f1\b0\fs32 \cf2 In this task you will verify that the application is able to write to and read from the database.\
\pard\pardeftab720\sa640\partightenfactor0

\f2\fs48 \cf2 Connect to the database and query an application table\
\pard\pardeftab720\sa480\partightenfactor0

\f1\fs32 \cf2 In this step you will connect to the Cloud SQL instance by running\'a0
\f0\b \cf2 \cb3 \strokec2 PL/SQL
\f1\b0 \cf2 \cb3 \strokec2 \'a0in Cloud Shell.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa480\partightenfactor0
\ls23\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Google Cloud Console, navigate to\'a0
\f0\b Databases
\f1\b0 \'a0>\'a0
\f0\b SQL
\f1\b0 \'a0and select the\'a0
\f3\fs30 \cb6 postgres-gmemegen
\f1\fs32 \cb3 \'a0instance.\cb1 \
\ls23\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the\'a0
\f0\b Overview
\f1\b0 \'a0pane , scroll down to\'a0
\f0\b Connect to this instance
\f1\b0 \'a0and click the\'a0
\f0\b Open Cloud Shell
\f1\b0 \'a0button.\cb1 \
\ls23\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Run the auto-populated command in Cloud Shell.\cb1 \
\ls23\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When prompted, enter the password:\'a0
\f3\fs30 \cb6 supersecret!
\f1\fs32 \cb1 \
\ls23\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 At the\'a0
\f3\fs30 \cb6 postgres=>
\f1\fs32 \cb3 \'a0prompt enter the following command to select the gmemegen_db database:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 \\c gmemegen_db\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa480\partightenfactor0
\ls24\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 When prompted, enter the password:\'a0
\f3\fs30 \cb6 supersecret!
\f1\fs32 \cb1 \
\ls24\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 At the\'a0
\f3\fs30 \cb6 gmemegen_db=>
\f1\fs32 \cb3 \'a0prompt enter:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 select * from meme;\
\
\cf2 \cb3 \strokec2 This will display a row for each meme you have generated through the gMemegen app.\
\
\pard\pardeftab720\sa640\partightenfactor0

\f0\b\fs60 \cf2 \cb3 \strokec2 Congratulations!\
\pard\pardeftab720\sa480\partightenfactor0

\f1\b0\fs32 \cf2 In this lab, you configured an application to access a Cloud SQL for PostgreSQL database. You created a Kubernetes cluster and deployed a simple meme generation application to that cluster, as well as connected the application to the supplied Cloud SQL for PostgreSQL database instance and confirmed that it is able to write to and read from it.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \strokec2 \
}